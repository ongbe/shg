/* stock.cc: testing processing stock data */

/**
 * \file testing/stock.cc
 * Testing processing stock data.
 * \date Created on 4 April 2010.
 */

#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <fstream>
#include <iostream>
#include "shg/stock.h"
#include "testshg.h"

namespace SHG {
namespace Testing {

namespace {

// The period choosen includes the moment of denomination 1:10000.
const char* const data =
     "19941228 WEDEL        1550000.00\n"
     "19941228 WOLCZANKA     269000.00\n"
     "19941228 ZYWIEC       1550000.00\n"
     "19941229 WEDEL        1580000.00\n"
     "19941229 WOLCZANKA     270000.00\n"
     "19941229 ZYWIEC       1605000.00\n"
     "19950102 WEDEL            162.50\n"
     "19950102 WOLCZANKA         28.60\n"
     "19950102 ZYWIEC           163.00\n"
     "19950103 WEDEL             -1.00\n"
     "19950103 WOLCZANKA         30.10\n"
     "19950103 ZYWIEC           166.50\n"
     "19950104 WEDEL            163.00\n"
     "19950104 WOLCZANKA         29.50\n"
     "19950104 ZYWIEC           166.00\n";

const char* const splits =
     "19941229 WEDEL          1  10\n"
     "19950103 ZYWIEC         1   2\n";

void test_gpwdata() {
     const char* const dtxt = "data.txt";
     const char* const stxt = "splits.txt";
     {
          std::ofstream f(dtxt, std::ios::binary);
          SHG_ASSERT(f && f.write(data, std::strlen(data)));
          f.close();
          f.open(stxt, std::ios::binary);
          SHG_ASSERT(f && f.write(splits, std::strlen(splits)));
     }

     const double csum = 1212.85;       // correct sum of elements

     const SHG::Stock::GPW_data d(dtxt, stxt);
     double sum = 0.0;
     for (int i = 0; i < d.nassets(); i++)
          for (int j = 0; j < d.nobs(); j++)
               if (d.price()[i][j] > -0.5)
                    sum += d.price()[i][j];
     SHG_ASSERT(std::abs(sum - csum) < 1e-10);
     std::remove(dtxt);
     std::remove(stxt);
}

const char* const sp500 =
     "Date,Open,High,Low,Close,Volume,Adj Close\n"
     "2011-10-31,1284.96,1284.96,1253.16,1253.30,4310210000,1253.30\n"
     "2011-10-28,1284.39,1287.08,1277.01,1285.09,4536690000,1285.09\n"
     "2011-10-27,1243.97,1292.66,1243.97,1284.59,6367610000,1284.59\n"
     "2011-10-26,1229.17,1246.28,1221.06,1242.00,4873530000,1242.00\n"
     "2011-10-25,1254.19,1254.19,1226.79,1229.05,4473970000,1229.05\n"
     "2011-10-24,1238.72,1256.55,1238.72,1254.19,4309380000,1254.19\n"
     "2011-10-21,1215.39,1239.03,1215.39,1238.25,4980770000,1238.25\n"
     "2011-10-20,1209.92,1219.53,1197.34,1215.39,4870290000,1215.39\n"
     "2011-10-19,1223.46,1229.64,1206.31,1209.88,4846390000,1209.88\n"
     "2011-10-18,1200.75,1233.10,1191.48,1225.38,4840170000,1225.38\n"
     "2011-10-17,1224.47,1224.47,1198.55,1200.86,4300700000,1200.86\n"
     "2011-10-14,1205.65,1224.61,1205.65,1224.58,4116690000,1224.58\n"
     "2011-10-13,1206.96,1207.46,1190.58,1203.66,4436270000,1203.66\n"
     "2011-10-12,1196.19,1220.25,1196.19,1207.25,5355360000,1207.25\n"
     "2011-10-11,1194.60,1199.24,1187.30,1195.54,4424500000,1195.54\n"
     "2011-10-10,1158.15,1194.91,1158.15,1194.89,4446800000,1194.89\n"
     "2011-10-07,1165.03,1171.40,1150.26,1155.46,5580380000,1155.46\n"
     "2011-10-06,1144.11,1165.55,1134.95,1164.97,5098330000,1164.97\n"
     "2011-10-05,1124.03,1146.07,1115.68,1144.03,2510620000,1144.03\n"
     "2011-10-04,1097.42,1125.12,1074.77,1123.95,3714670000,1123.95\n"
     "2011-10-03,1131.21,1138.99,1098.92,1099.23,5670340000,1099.23\n"
     "2011-09-30,1159.93,1159.93,1131.34,1131.42,4416790000,1131.42\n"
     "2011-09-29,1151.74,1175.87,1139.93,1160.40,5285740000,1160.40\n"
     "2011-09-28,1175.39,1184.71,1150.40,1151.06,4787920000,1151.06\n"
     "2011-09-27,1163.32,1195.86,1163.32,1175.38,5548130000,1175.38\n"
     "2011-09-26,1136.91,1164.19,1131.07,1162.95,4762830000,1162.95\n"
     "2011-09-23,1128.82,1141.72,1121.36,1136.43,5639930000,1136.43\n"
     "2011-09-22,1164.55,1164.55,1114.22,1129.56,6703140000,1129.56\n"
     "2011-09-21,1203.63,1206.30,1166.21,1166.76,4728550000,1166.76\n"
     "2011-09-20,1204.50,1220.39,1201.29,1202.09,4315610000,1202.09\n"
     "2011-09-19,1214.99,1214.99,1188.36,1204.09,4254190000,1204.09\n"
     "2011-09-16,1209.21,1220.06,1204.46,1216.01,5248890000,1216.01\n"
     "2011-09-15,1189.44,1209.11,1189.44,1209.11,4479730000,1209.11\n"
     "2011-09-14,1173.32,1202.38,1162.73,1188.68,4986740000,1188.68\n"
     "2011-09-13,1162.59,1176.41,1157.44,1172.87,4681370000,1172.87\n"
     "2011-09-12,1153.50,1162.52,1136.07,1162.27,5168550000,1162.27\n"
     "2011-09-09,1185.37,1185.37,1148.37,1154.23,4586370000,1154.23\n"
     "2011-09-08,1197.98,1204.40,1183.34,1185.90,4465170000,1185.90\n"
     "2011-09-07,1165.85,1198.62,1165.85,1198.62,4441040000,1198.62\n"
     "2011-09-06,1173.97,1173.97,1140.13,1165.24,5103980000,1165.24\n"
     "2011-09-02,1203.90,1203.90,1170.56,1173.97,4401740000,1173.97\n"
     "2011-09-01,1219.12,1229.29,1203.85,1204.42,4780410000,1204.42\n";

const char* const wig =
     "Data,Otwarcie,Najwyzszy,Najnizszy,Zamkniecie,Wolumen\r\n"
     "2011-09-01,41971.5,41981.41,41102.35,41553.09,158025923\r\n"
     "2011-09-02,41243.93,41287.07,40173.51,40544.28,119388463\r\n"
     "2011-09-05,39729.4,39862.32,38992.56,38992.56,107808480\r\n"
     "2011-09-06,39135.31,39727.71,38805.35,39189.1,125709124\r\n"
     "2011-09-07,39733.64,40418.3,39695.48,40418.3,84212969\r\n"
     "2011-09-08,40442.9,40732.76,40001.76,40405.17,117787166\r\n"
     "2011-09-09,40190.27,40253.71,38708.57,38708.57,88364971\r\n"
     "2011-09-12,37969.75,37969.75,37051.55,37437.36,152938899\r\n"
     "2011-09-13,37963.5,38081.49,37120.14,37735.42,120273982\r\n"
     "2011-09-14,37438.64,38144.62,37438.64,37881.76,116739076\r\n"
     "2011-09-15,38026.64,39357.2,38015.79,38945,155988340\r\n"
     "2011-09-16,39249.19,39453.25,39134.11,39254.5,208299276\r\n"
     "2011-09-19,38683.97,38814.91,38103.18,38740.68,131285019\r\n"
     "2011-09-20,38419.8,39416.66,38325.16,39177.62,127755049\r\n"
     "2011-09-21,39387.26,39564.47,39061.39,39225.39,149559335\r\n"
     "2011-09-22,38305.23,38372.63,36851.2,36851.2,187661100\r\n"
     "2011-09-23,36801.46,36801.46,35348.98,36549.47,206089877\r\n"
     "2011-09-26,35921.43,37372.02,35761.42,36765.94,144861551\r\n"
     "2011-09-27,37747.72,38076.35,37697.2,37998.03,102220263\r\n"
     "2011-09-28,37826.56,38404.69,37822.94,38026.53,98741335\r\n"
     "2011-09-29,37913.28,38679.64,37864.06,38264.32,134101747\r\n"
     "2011-09-30,38474.72,38498.97,37630.83,38268.75,119500630\r\n"
     "2011-10-03,37377.43,37734.87,37219.02,37620.12,80204146\r\n"
     "2011-10-04,37298.1,37298.1,36224.64,36744.86,166226307\r\n"
     "2011-10-05,37193.19,37496.93,36994.08,37496.93,79740782\r\n"
     "2011-10-06,37733.43,38245.87,37504.69,37915.03,112458693\r\n"
     "2011-10-07,38062.71,38401.34,37851.81,38174.89,169765672\r\n"
     "2011-10-10,38490.02,39291.95,38244.53,39291.95,180591102\r\n"
     "2011-10-11,39422.96,39530.12,39066.34,39316.43,154432678\r\n"
     "2011-10-12,39427.94,40182.11,39122.09,40182.11,217617465\r\n"
     "2011-10-13,40102.29,40407.67,39579.52,39608.13,235925334\r\n"
     "2011-10-14,39794.06,40228.4,39412.06,40026.63,111627322\r\n"
     "2011-10-17,40345.01,40576.77,39534.62,39825.64,194655060\r\n"
     "2011-10-18,39372.77,39837.96,39188.48,39837.96,100006085\r\n"
     "2011-10-19,39999.91,40123.09,39645.32,39969.82,97032938\r\n"
     "2011-10-20,39518.48,39583.98,38835.92,38835.92,93068254\r\n"
     "2011-10-21,39044.55,40055.41,39019.79,40054.41,102341979\r\n"
     "2011-10-24,40412.88,41095.76,40288.44,41050.11,283480471\r\n"
     "2011-10-25,40986.95,41342.41,40329.77,40702.26,193238829\r\n"
     "2011-10-26,40617.38,40966.63,40406.04,40577.52,117920784\r\n"
     "2011-10-27,41466.95,41901.23,41293.63,41708.88,181181796\r\n"
     "2011-10-28,41810.11,41943.65,41417.24,41686.02,161861410\r\n"
     "2011-10-31,41446.23,41446.23,41160.66,41160.66,171795791\r\n";

void test_sp500() {
     const char* const fn = "sp500.csv";
     {
          std::ofstream f(fn, std::ios::binary);
          SHG_ASSERT(f && f.write(sp500, std::strlen(sp500)));
     }
     std::vector<SHG::Stock::Closing_price> d;
     int line;
     SHG_ASSERT(SHG::Stock::sp500(fn, d, line) == 0);
     std::remove(fn);
}

void test_wig() {
     const char* const fn = "wig_d.csv";
     {
          std::ofstream f(fn, std::ios::binary);
          SHG_ASSERT(f && f.write(wig, std::strlen(wig)));
     }
     std::vector<SHG::Stock::Closing_price> d;
     int line;
     SHG_ASSERT(SHG::Stock::wig(fn, d, line) == 0);
     std::remove(fn);
}

}       // anonymous namespace

void test_stock() {
     test_gpwdata();
     test_sp500();
     test_wig();
}

}       // namespace Testing
}       // namespace SHG
